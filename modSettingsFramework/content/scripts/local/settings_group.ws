abstract class ISettingsGroup
{
    protected var m_parentMaster : ISettingsMaster;

    // these are set using 'default' in the child class
    public const var id: name;
    public const var defaultPresetIndex: int;


    // ===================================== Main functions  =======================================

    // Prepares the object
    public function Init(parent_: ISettingsMaster) : void
    {
        m_parentMaster = parent_;
    }

    // Corrects values to ranges specified in the xml
    public function Validate(): void
    {
        LogChannel('ModSettingsFramework', "Validating settings for group '" + id + "'");
        Parser_Validate();
    }

    // Reads all settings from CInGameConfigWrapper using ReadSettingValue and sets class variables
    public function Read(optional config: CInGameConfigWrapper) : void 
    {
        if (!config)
			config = theGame.GetInGameConfigWrapper();

        LogChannel('ModSettingsFramework', "Reading settings for group '" + id + "'");
        Parser_Read(config);
		Validate();
    }

    // Using class variables and WriteSettingValue sets all settings in CInGameConfigWrapper and saves user configuration
    public function Write(shouldSave: bool, optional config: CInGameConfigWrapper) : void 
    {
        if (!config)
			config = theGame.GetInGameConfigWrapper();

        LogChannel('ModSettingsFramework', "Writing settings for group '" + id + "'");
        Validate();
        Parser_Write(config);

        if (shouldSave)
            theGame.SaveUserSettings();
    }

    // Applies a preset
    public function Reset(presetIndex: int, shouldSave: bool, optional config: CInGameConfigWrapper) : void
    {
        if (!config)
			config = theGame.GetInGameConfigWrapper();
        
        LogChannel('ModSettingsFramework', "Resetting settings for group '" + id + "'" + " to preset " + presetIndex);
        m_parentMaster.ResetSettingValues(config, id, presetIndex);
        Read(config); // get preset values back from config
        
        if (shouldSave)
            theGame.SaveUserSettings();
    }

    // Applies a default preset
    public function ResetToDefault(shouldSave: bool, optional config: CInGameConfigWrapper) : void
    {
        Reset(defaultPresetIndex, shouldSave, config);
    }

    // Returns integer value of the unified enum type for options var index in user config
    // If the config value is not valid for given option, should return -1
    public function EnumValueMappingConfigToUnified(vId: name, val: int) : int
    {
        return Parser_EnumValueMappingConfigToUnified(vId, val);
    }

    // Returns the options var index in user config for integer value of unified enum
    // If the unified value is not valid for given option, should return -1
    public function EnumValueMappingUnifiedToConfig(vId: name, val: int) : int
    {
        return Parser_EnumValueMappingUnifiedToConfig(vId, val);
    }

    // If integer value for given enum variable is correct returns said value
    // Otherwise returns the smallest valid value
    public function EnumValueMappingValidateUnified(vId: name, val: int) : int
    {
        return Parser_EnumValueMappingValidateUnified(vId, val);
    }



    // ====================== Functions to be defined in class generated by parser  ======================

    protected function Parser_Validate(): void {}
    protected function Parser_Read(config: CInGameConfigWrapper) : void {}
    protected function Parser_Write(config: CInGameConfigWrapper) : void {}
    protected function Parser_EnumValueMappingConfigToUnified(vId: name, val: int) : int { return -1; }
    protected function Parser_EnumValueMappingUnifiedToConfig(vId: name, val: int) : int { return -1; }
    protected function Parser_EnumValueMappingValidateUnified(vId: name, val: int) : int { return 0; }



    // ====================== Utility functions ======================

    // these bool conversion functions are here for sanity sake, 
    // because an implicit conversion from string to bool doesn't sit right with me
    protected function StringToBool(s: string) : bool
    {
        if(s == "false" || s == "" || !s) {
            return false;
        } else {
            return true;
        }
    }

    protected function BoolToString(b: bool) : string
    {
        if(b) {
            return "true";
        } else {
            return "false";
        }
    }

    protected function ReadIntSettingValue(config: CInGameConfigWrapper, vId: name) : int
    {
        return StringToInt(m_parentMaster.ReadSettingValue(config, this.id, vId), 0);
    }

    protected function ReadFloatSettingValue(config: CInGameConfigWrapper, vId: name) : float
    {
        return StringToFloat(m_parentMaster.ReadSettingValue(config, this.id, vId), 0.0);
    }

    protected function ReadBoolSettingValue(config: CInGameConfigWrapper, vId: name) : bool
    {
        return StringToBool(m_parentMaster.ReadSettingValue(config, this.id, vId));
    }

    protected function ReadUnifiedEnumSettingValue(config: CInGameConfigWrapper, vId: name) : int
    {
        return EnumValueMappingConfigToUnified(vId, ReadIntSettingValue(config, vId));
    }


    protected function WriteIntSettingValue(config: CInGameConfigWrapper, vId: name, value: int) : void
    {
        m_parentMaster.WriteSettingValue(config, this.id, vId, IntToString(value));
    }

    protected function WriteFloatSettingValue(config: CInGameConfigWrapper, vId: name, value: float) : void
    {
        m_parentMaster.WriteSettingValue(config, this.id, vId, FloatToString(value));
    }

    protected function WriteBoolSettingValue(config: CInGameConfigWrapper, vId: name, value: bool) : void
    {
        m_parentMaster.WriteSettingValue(config, this.id, vId, BoolToString(value));
    }

    protected function WriteUnifiedEnumSettingValue(config: CInGameConfigWrapper, vId: name, value: int) : void
    {
        WriteIntSettingValue(config, vId, EnumValueMappingUnifiedToConfig(vId, value));
    }
}