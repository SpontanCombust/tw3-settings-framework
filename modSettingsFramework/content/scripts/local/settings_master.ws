abstract class ISettingsMaster
{
    public const var modVersion: string;
    
    public var id: name;


    // ============================ Main functions, can be overriden  ==============================

    // Initializes the settings class members and more
    public function Init() : void 
    {
        LogChannel('ModSettingsFramework', "Initialising settings master '" + id + "'");
        Parser_Init();

        if(ShouldResetSettingsToDefaultOnInit())
        {
            ResetSettingsToDefault();
        }
    }

    // Corrects values to ranges specified in the xml
    public function ValidateSettings() : void
    {
        LogChannel('ModSettingsFramework', "Validating settings for '" + id + "'");
        Parser_ValidateSettings();
    }

    // Reads all settings from CInGameConfigWrapper using ReadSettingValue and sets class variables
    public function ReadSettings() : void 
    {
        var config: CInGameConfigWrapper;
        config = theGame.GetInGameConfigWrapper();

        LogChannel('ModSettingsFramework', "Reading settings for '" + id + "'");
        Parser_ReadSettings(config);
    }

    // Using class variables and WriteSettingValue sets all settings in CInGameConfigWrapper and saves user configuration
    public function WriteSettings() : void 
    {
        var config: CInGameConfigWrapper;
        config = theGame.GetInGameConfigWrapper();

        LogChannel('ModSettingsFramework', "Writing settings for '" + id + "'");
        Parser_WriteSettings(config);
        theGame.SaveUserSettings();
    }

    // Apply a default preset to all groups if possible
    public function ResetSettingsToDefault() : void
    {
        var config: CInGameConfigWrapper;
        config = theGame.GetInGameConfigWrapper();

        LogChannel('ModSettingsFramework', "Resetting settings to default for '" + id + "'");
        Parser_ResetSettingsToDefault(config);
        theGame.SaveUserSettings();
    }

    // Checks whether this mod's settings have been saved onto disk before
    public function ShouldResetSettingsToDefaultOnInit() : bool
    {
        var config: CInGameConfigWrapper;
        config = theGame.GetInGameConfigWrapper();

        return Parser_ShouldResetSettingsToDefaultOnInit(config);
    }




    // ==== Get/Set functions - to be potentially overriden by the developer if default is not enough ====

    // Fetches setting value from CInGameConfigWrapper
    // Master provides this function for group classes
    public function ReadSettingValue(config: CInGameConfigWrapper, gId: name, vId: name) : string
    {
        return config.GetVarValue(gId, vId);
    }

    // Writes setting value into CInGameConfigWrapper
    // Master provides this function for group classes
    public function WriteSettingValue(config: CInGameConfigWrapper, gId: name, vId: name, value: string) : void
    {
        config.SetVarValue(gId, vId, value);
    }

    // Applies a preset to a group in CInGameConfigWrapper
    // Master provides this function for group classes
    public function ResetSettingValues(config: CInGameConfigWrapper, gId: name, presetIndex: int) : void
    {
        config.ApplyGroupPreset(gId, presetIndex);
    }



    // ====================== Functions to be defined in class generated by parser  ======================

    protected function Parser_Init() : void {}
    protected function Parser_ValidateSettings() : void {}
    protected function Parser_ReadSettings(config: CInGameConfigWrapper) : void {}
    protected function Parser_WriteSettings(config: CInGameConfigWrapper) : void {}
    protected function Parser_ResetSettingsToDefault(config: CInGameConfigWrapper) : void {}
    protected function Parser_ShouldResetSettingsToDefaultOnInit(config: CInGameConfigWrapper) : bool { return false; }
}