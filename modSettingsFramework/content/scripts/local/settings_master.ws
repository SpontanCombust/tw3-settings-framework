abstract class ISettingsMaster
{
    // ====================== Functions to be defined in class generated by parser  ======================

    // Initializes the settings class members and more
    public function Init() : void 
    {
        // child class will initialize variables beforehand
        ReadSettings();
    }

    // Reads all settings from CInGameConfigWrapper using ReadSettingValue and sets class variables
    public function ReadSettings() : void 
    {
        // child class will call read code beforehand
        OnReadSettings();
    }

    // Using class variables and WriteSettingValue sets all settings in CInGameConfigWrapper and saves user configuration
    public function WriteSettings() : void 
    {
        // child class will call write code here
        theGame.SaveUserSettings();
        OnWriteSettings();
    }



    // ====================== Listener functions - to be overriden by the developer ======================

    // Invoked after ReadSettings
    public function OnReadSettings() : void {}
    // Invoked after WriteSettings
    public function OnWriteSettings() : void {}



    // ====================== Get/Set functions - to be potentially overriden by the developer ======================

    // Fetches setting value from CInGameConfigWrapper
    public function ReadSettingValue(config: CInGameConfigWrapper, groupId: name, varId: name) : string
    {
        return config.GetVarValue(groupId, varId);
    }

    // Writes setting value into CInGameConfigWrapper
    public function WriteSettingValue(config: CInGameConfigWrapper, groupId: name, varId: name, value: string) : void
    {
        config.SetVarValue(groupId, varId, value);
    }



    // ====================== Utility functions ======================

    protected function StringToBool(s: string) : bool
    {
        if(s == "false" || s == "" || !s) {
            return false;
        } else {
            return true;
        }
    }

    protected function BoolToString(b: bool) : string
    {
        if(b) {
            return "true";
        } else {
            return "false";
        }
    }
}